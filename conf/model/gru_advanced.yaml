defaults:
  - pipeline/default@_here_
  - _self_

x_sys:
  steps:
    - _target_: src.modules.transformation.eeg.bipolar.BipolarEEG
      use_full_map: false
      keep_ekg: false
    - _target_: src.modules.transformation.clip.Clip
      lower: -1024
      upper: 1024
    - _target_: src.modules.transformation.nantozero.NaNToZero
      eeg: true
    - _target_: src.modules.transformation.eeg.divide.Divide
      value: 32
    - _target_: src.modules.transformation.eeg.butter.ButterFilter
      lower: 0.5
    - _target_: src.modules.transformation.eeg.quantize.Quantizer
    - _target_: src.modules.transformation.eeg.downsample.Downsample
      downsample_factor: 5
#    - _target_: src.modules.transformation.eeg.rolling.Rolling
#      channels: [0, 2, 4, 6]
#      window_sizes: [20, 20, 20, 20]
#      operations: ["std", "std", "std", "std"]
#    - _target_: src.modules.transformation.eeg.select_channels.SelectChannels
#      channels: [8, 9, 10, 11, 12, 13, 14, 15] #Select the last 18 channels


train_sys:
  steps:
    - _target_: src.modules.training.main_trainer.MainTrainer
      model_name: GRUSimple # Can't have special characters or spaces
      two_stage: true
      two_stage_evaluator_threshold: 9
      two_stage_split_test: true
      two_stage_pretrain_full: true
      model:
        _target_: src.modules.training.models.gru_simple.GRUTimeSeriesClassifier
        num_classes: 6
        input_dim: 9
        bidirectional: true
      optimizer: # Partially instantiate optimizer, so model parameters can be linked at runtime
        _target_: functools.partial
        _args_:
          - _target_: hydra.utils.get_class
            path: torch.optim.AdamW
        lr: 0.003
      criterion:
        _target_: src.modules.training.losses.kldiv_logits.CustomKLDivLogitsLoss
      epochs: 51
      batch_size: 64
      patience: 10
      dataset_args:
        data_type: "eeg"
        get_item_custom:
        subsample_method: "running_random"
        augmentations:
          _target_: src.modules.training.augmentations.custom_sequential.CustomSequential
          x_transforms:
            - _target_: src.modules.training.augmentations.reverse_1d.Reverse1D
              p: 0.23
            - _target_: src.modules.training.augmentations.random_phase_shift.RandomPhaseShift
              p: 0.4
              shift_limit: 0.25
            - _target_: src.modules.training.augmentations.substract_channels.SubstractChannels
              p: 0.2
          xy_transforms:
            - _target_: src.modules.training.augmentations.mixup_1d.MixUp1D
              p: 0.22
            - _target_: src.modules.training.augmentations.cutmix_1d.CutMix1D
              p: 0.12
              # Randomly select a percentage between 'low' and 'high' to preserve on the left side of the signal.
              low: 0.0
              high: 0.75
      scheduler:
        _target_: functools.partial
        _args_:
          - _target_: hydra.utils.get_class
            path: timm.scheduler.cosine_lr.CosineLRScheduler
        t_initial: 50
        cycle_mul: 1
        cycle_decay: 1
        cycle_limit: 1
        warmup_t: 0
        warmup_lr_init: 1e-5
    - _target_: src.modules.training.postprocessing.softmax.Softmax
